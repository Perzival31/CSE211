public boolean isPalindrome(Queue<Integer> q) {
    Stack<Integer> s = new Stack<>();
    int size = q.size();
    for (int i = 0; i < size; i++){
           int num = q.peek();
        q.add(q.peek());
           s.push(q.remove()); 
    }
    boolean isPalindrome = true;
    for (int i = 0; i < size; i++){
        int num = q.remove();
        if (s.pop() != num){
            isPalindrome = false;
        }
        q.add(num);
   
    }
    return isPalindrome;
}

public static void interleave(Queue<Integer> q) {
    if (q.size() % 2 != 0) {
        throw new IllegalArgumentException();
    }
    
    Stack<Integer> s = new Stack<Integer>();
    int size = q.size();
    
    for (int i = 0; i < size / 2; i++) {
        s.push(q.remove());
    }
    
    while (!s.isEmpty()) {
        q.add(s.pop());
    }
    
    for (int i = 0; i < size; i++) {
        if (i < size / 2) {
            q.add(q.remove());
        } else {
            s.add(q.remove());
        }
    }
    
    while (!s.isEmpty()) {
        q.add(s.pop());
        q.add(q.remove());
    }
}